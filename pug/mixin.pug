doctype
html
    head
    body
    //- Declaration ==Mixins allow you to create reusable blocks of Pug.
    mixin list
      ul
        li foo
        li bar
        li baz
    //- Use
    +list
    +list
    
    //Mixins are compiled to functions, and can take arguments:
    mixin pet(name)
      li.pet= name
    ul
      +pet('cat')
      +pet('dog')
      +pet('pig')
      
    //Mixin Blocks == Mixins can also take a block of Pug to act as the content:
    mixin article(title)
      .article
        .article-wrapper
          h1= title
          if block
            block
          else
            p No content provided

    +article('Hello world')

    +article('Hello world')
      p This is my
      p Amazing article
      
    //Mixin Attributes == Mixins also get an implicit attributes argument, which is taken from the attributes passed to the mixin:
    
    mixin link(href, name)
      //- attributes == {class: "btn"}
      a(class!=attributes.class href=href)= name

    +link('/foo', 'foo')(class="btn")
    
    //Default Argument’s Values == you can also set default values for you arguments. Same as setting default function parameters in ES6.
    
    //- Declaration
    mixin article(title='Default Title')
      .article
        .article-wrapper
          h1= title

    //- Use
    +article()

    +article('Hello world')
    
    //Rest Arguments == You can write mixins that take an unknown number of arguments using the “rest arguments” syntax.
    
    mixin list(id, ...items)
      ul(id=id)
        each item in items
          li= item

    +list('my-list', 1, 2, 3, 4)
    